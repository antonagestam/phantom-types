- case: calling_function_with_unknown_raises
  main: |
    import datetime
    from phantom.datetime import TZAware

    def take_aware(a: TZAware) -> TZAware:
        return a

    take_aware(datetime.datetime.now()) # E: Argument 1 to "take_aware" has incompatible type "datetime"; expected "TZAware"  [arg-type]
- case: calling_function_with_known
  main: |
    import datetime
    from phantom.datetime import TZAware

    def take_aware(a: TZAware) -> TZAware:
        return a

    b = take_aware(
      TZAware.parse(datetime.datetime.now(tz=datetime.timezone.utc))
    )
    reveal_type(b) # N: Revealed type is "phantom.datetime.TZAware"
- case: narrowing_to_tz_aware_makes_tzinfo_non_optional
  main: |
    import datetime
    from phantom.datetime import TZAware

    dt: datetime.datetime
    reveal_type(dt.tzinfo) # N: Revealed type is "Union[datetime.tzinfo, None]"
    assert isinstance(dt, TZAware)
    reveal_type(dt.tzinfo) # N: Revealed type is "datetime.tzinfo"
- case: bound_is_not_erased
  main: |
    import datetime
    from phantom.datetime import TZAware, TZNaive

    o: datetime.datetime
    aware = TZAware.parse(o)
    naive = TZNaive.parse(o)

    reveal_type(aware.month) # N: Revealed type is "builtins.int"
    reveal_type(naive.month) # N: Revealed type is "builtins.int"
